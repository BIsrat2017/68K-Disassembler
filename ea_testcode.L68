00003000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 3/8/2017 12:53:37 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : EA Decoder Test
00000000                             3  * Written by : Connor McGwire
00000000                             4  * Date       : 3/7/2017
00000000                             5  * Description: Tests effective addressing subroutine
00000000                             6  *-----------------------------------------------------------
00000000                             7  
00000000                             8          INCLUDE 'EADecoder.x68'
00000000                             9  
00000000                            10  
00000000  =00010000                 11  output      EQU $00010000
00000000                            12  
00000000  =0000003C                 13  IMMEDIATE   EQU %00111100
00000000  =00000039                 14  ABS_WORD    EQU %00111001
00000000  =00000038                 15  ABS_LONG    EQU %00111000
00000000  =00000000                 16  Dn          EQU %00000000
00000000  =00000008                 17  An          EQU %00001000
00000000  =00000010                 18  INDIRECT    EQU %00010000
00000000  =00000018                 19  POST_INC    EQU %00011000
00000000  =00000020                 20  PRE_DEC     EQU %00100000
00000000                            21  
00000000                            22  
00000000                            23  
00000000                            24  EADecoder_left
00000000  48E7 FF7E                 25          MOVEM.L     D0-D7/A1-A6, -(SP)
00000004                            26          
00000004                            27          ** Swap the mode and register bits
00000004  1800                      28          MOVE.B  D0,D4
00000006  0200 0007                 29          ANDI.B  #%00000111,D0   *Mask mode
0000000A  0204 0038                 30          ANDI.B  #%00111000,D4   *Mask register
0000000E  E708                      31          LSL.B   #3,D0           *Move bits over
00000010  E60C                      32          LSR.B   #3,D4           *Move bits over
00000012  8004                      33          OR.B    D4,D0           *Recombine
00000014                            34          
00000014  6000 0006                 35          BRA     left_skip
00000018                            36  
00000018                            37  EADecoder
00000018  48E7 FF7E                 38          MOVEM.L     D0-D7/A1-A6, -(SP) *Store registers on stack, except D0
0000001C                            39  left_skip        
0000001C  1401                      40          MOVE.B  D1,D2 ** Store opcode size in bytes into D2
0000001E                            41          
0000001E  43F9 00010000             42          LEA     output,A1
00000024  45F9 00010000             43          LEA     output,A2
0000002A                            44          
0000002A                            45          *First, decoder will check for the 3 types with hard coded register values
0000002A  B07C 003C                 46          CMP     #IMMEDIATE,D0
0000002E  6700 006C                 47          BEQ     dec_immediate
00000032                            48          
00000032  B07C 0039                 49          CMP     #ABS_WORD,D0
00000036  6700 0080                 50          BEQ     dec_abs_word
0000003A                            51          
0000003A  B07C 0038                 52          CMP     #ABS_LONG,D0
0000003E  6700 0084                 53          BEQ     dec_abs_long
00000042                            54          
00000042  163C 0001                 55          MOVE.B  #1,D3
00000046                            56          
00000046                            57          *If it was none of the above, store the register and mode seperately
00000046  1200                      58          MOVE.B  D0,D1
00000048  0201 0038                 59          ANDI.B  #%00111000,D1           *Get mode value
0000004C  0200 0007                 60          ANDI.B  #%00000111,D0           *Get register value
00000050  0600 0030                 61          ADDI.B  #$30,D0
00000054                            62                
00000054  B27C 0000                 63          CMP     #Dn,D1
00000058  6700 0076                 64          BEQ     dec_Dn 
0000005C                            65          
0000005C  B27C 0008                 66          CMP     #An,D1
00000060  6700 007A                 67          BEQ     dec_An
00000064                            68                  
00000064  B27C 0010                 69          CMP     #INDIRECT,D1
00000068  6700 007E                 70          BEQ     dec_indirect
0000006C                            71                  
0000006C  B27C 0018                 72          CMP     #POST_INC,D1
00000070  6700 008A                 73          BEQ     dec_post_inc
00000074                            74                  
00000074  B27C 0020                 75          CMP     #PRE_DEC,D1
00000078  6700 009C                 76          BEQ     dec_pre_dec
0000007C                            77          
0000007C  4243                      78          CLR     D3
0000007E                            79          
0000007E                            80  dec_return ** Common return for all types
0000007E                            81          
0000007E                            82          ** Print display string
0000007E  103C 000E                 83          MOVE.B  #14,D0
00000082  4E4F                      84          TRAP    #15
00000084                            85          
00000084                            86          ** If there is immediate data to print, print it
00000084  B67C 0001                 87          CMP     #1,D3
00000088  6700 000C                 88          BEQ     imm_skip
0000008C                            89          
0000008C  103C 000F                 90          MOVE.B  #15,D0
00000090  143C 0010                 91          MOVE.B  #16,D2
00000094  4E4F                      92          TRAP    #15
00000096                            93  
00000096                            94  imm_skip
00000096  4CDF 7EFF                 95          MOVEM.L     (SP)+, D0-D7/A1-A6 *Return register data from stack, except D0
0000009A  4E75                      96          RTS
0000009C                            97          
0000009C                            98          * Individual EA decoders *
0000009C                            99  
0000009C                           100  dec_immediate   *DECODE IMMEDIATE VALUE*
0000009C  14FC 0023                101          MOVE.B  #'#',(A2)+  * Move '#' char into string
000000A0  14FC 0024                102          MOVE.B  #'$',(A2)+  * Move '$' char into string
000000A4  14FC 0000                103          MOVE.B  #$0,(A2)+   * Null terminate string
000000A8  B47C 0002                104          CMP     #2,D2       * Check if data is word length
000000AC  6700 0006                105          BEQ     imm_word    
000000B0                           106          
000000B0  2218                     107          MOVE.L  (A0)+,D1    * Length was long
000000B2  60CA                     108          BRA     dec_return
000000B4                           109          
000000B4                           110  imm_word
000000B4  3218                     111          MOVE.W  (A0)+,D1    * Length was word
000000B6  60C6                     112          BRA     dec_return
000000B8                           113  
000000B8                           114  
000000B8                           115  dec_abs_word    *DECODE ABSOLUTE WORD*
000000B8  14FC 0024                116          MOVE.B  #'$',(A2)+  * Move '$' char into string
000000BC  14FC 0000                117          MOVE.B  #$0,(A2)+   * Null terminate string
000000C0  3218                     118          MOVE.W  (A0)+,D1
000000C2  60BA                     119          BRA     dec_return
000000C4                           120          
000000C4                           121  
000000C4                           122  dec_abs_long    *DECODE ABSOLUTE LONG*
000000C4  14FC 0024                123          MOVE.B  #'$',(A2)+  * Move '$' char into string
000000C8  14FC 0000                124          MOVE.B  #$0,(A2)+   * Null terminate string
000000CC  2218                     125          MOVE.L  (A0)+,D1
000000CE  60AE                     126          BRA     dec_return
000000D0                           127          
000000D0                           128  
000000D0                           129  dec_Dn          *DECODE DIRECT DATA*
000000D0  14FC 0044                130          MOVE.B  #'D',(A2)+
000000D4  14C0                     131          MOVE.B  D0,(A2)+
000000D6  14FC 0000                132          MOVE.B  #$0,(A2)+
000000DA  60A2                     133          BRA     dec_return
000000DC                           134  
000000DC                           135          
000000DC                           136  dec_An          *DECODE DIRECT ADDRESS*
000000DC  14FC 0041                137          MOVE.B  #'A',(A2)+
000000E0  14C0                     138          MOVE.B  D0,(A2)+
000000E2  14FC 0000                139          MOVE.B  #$0,(A2)+
000000E6  6096                     140          BRA     dec_return
000000E8                           141  
000000E8                           142  
000000E8                           143  dec_indirect    *DECODE INDIRECT ACCESS*
000000E8  14FC 0028                144          MOVE.B  #'(',(A2)+
000000EC  14FC 0041                145          MOVE.B  #'A',(A2)+
000000F0  14C0                     146          MOVE.B  D0,(A2)+
000000F2  14FC 0029                147          MOVE.B  #')',(A2)+
000000F6  14FC 0000                148          MOVE.B  #$0,(A2)+
000000FA  6082                     149          BRA     dec_return
000000FC                           150          
000000FC                           151  
000000FC                           152  dec_post_inc    *DECODE INDIRECT POST INCREMENT*
000000FC  14FC 0028                153          MOVE.B  #'(',(A2)+
00000100  14FC 0041                154          MOVE.B  #'A',(A2)+
00000104  14C0                     155          MOVE.B  D0,(A2)+
00000106  14FC 0029                156          MOVE.B  #')',(A2)+
0000010A  14FC 002B                157          MOVE.B  #'+',(A2)+
0000010E  14FC 0000                158          MOVE.B  #$0,(A2)+
00000112  6000 FF6A                159          BRA     dec_return
00000116                           160          
00000116                           161          
00000116                           162  dec_pre_dec    *DECODE INDIRECT PRE DECREMENT*
00000116  14FC 002D                163          MOVE.B  #'-',(A2)+
0000011A  14FC 0028                164          MOVE.B  #'(',(A2)+
0000011E  14FC 0041                165          MOVE.B  #'A',(A2)+
00000122  14C0                     166          MOVE.B  D0,(A2)+
00000124  14FC 0029                167          MOVE.B  #')',(A2)+
00000128  14FC 0000                168          MOVE.B  #$0,(A2)+
0000012C  6000 FF50                169          BRA     dec_return
00000130                           170  
00000130                           171  
00000130                           172  
00000130                           173  
00000130                           174  
00000130                           175  -------------------- end include --------------------
00000130                           176  
00000130= 00                       177  blank   DC.B    '',0
00000131                           178  
00003000                           179          ORG     $3000
00003000                           180          
00003000                           181  start   
00003000                           182          ** Test non-immediate ea modes
00003000                           183          
00003000                           184          *Test direct register
00003000  103C 0005                185          MOVE.B  #%00000101,D0
00003004  4EB8 0018                186          JSR     EADecoder
00003008                           187          
00003008  103C 000D                188          MOVE.B  #13,D0
0000300C  43F8 0130                189          LEA     blank,A1
00003010  4E4F                     190          TRAP    #15
00003012                           191          
00003012                           192          *Test direct register left
00003012  103C 0028                193          MOVE.B  #%00101000,D0
00003016  4EB8 0000                194          JSR     EADecoder_left
0000301A                           195          
0000301A  103C 000D                196          MOVE.B  #13,D0
0000301E  43F8 0130                197          LEA     blank,A1
00003022  4E4F                     198          TRAP    #15
00003024                           199          
00003024                           200          *Test address register
00003024  103C 0008                201          MOVE.B  #%00001000,D0
00003028  4EB8 0018                202          JSR     EADecoder
0000302C                           203          
0000302C  103C 000D                204          MOVE.B  #13,D0
00003030  43F8 0130                205          LEA     blank,A1
00003034  4E4F                     206          TRAP    #15
00003036                           207          
00003036                           208          *Test indirect addressing
00003036  103C 0012                209          MOVE.B  #%00010010,D0
0000303A  4EB8 0018                210          JSR     EADecoder
0000303E                           211          
0000303E  103C 000D                212          MOVE.B  #13,D0
00003042  43F8 0130                213          LEA     blank,A1
00003046  4E4F                     214          TRAP    #15
00003048                           215          
00003048                           216          *Test Post Increment
00003048  103C 001E                217          MOVE.B  #%00011110,D0
0000304C  4EB8 0018                218          JSR     EADecoder
00003050                           219          
00003050  103C 000D                220          MOVE.B  #13,D0
00003054  43F8 0130                221          LEA     blank,A1
00003058  4E4F                     222          TRAP    #15
0000305A                           223          
0000305A                           224          *Test Pre Decrement
0000305A  103C 0023                225          MOVE.B  #%00100011,D0
0000305E  4EB8 0018                226          JSR     EADecoder
00003062                           227          
00003062                           228  *************************************************
00003062                           229          
00003062                           230          ** Test immediate ea modes **
00003062                           231          
00003062                           232          *Load test data into memory
00003062  207C 00005000            233          MOVEA.L #$00005000,A0
00003068  30FC 782A                234          MOVE.W  #$782A,(A0)+
0000306C  20FC 1111AAAA            235          MOVE.L  #$1111AAAA,(A0)+
00003072  207C 00005000            236          MOVEA.L #$00005000,A0
00003078                           237          
00003078                           238          *Print new line
00003078  103C 000D                239          MOVE.B  #13,D0
0000307C  43F8 0130                240          LEA     blank,A1
00003080  4E4F                     241          TRAP    #15
00003082                           242          
00003082                           243          *Test immediate addressing with size BYTE or WORD
00003082  103C 003C                244          MOVE.B  #%00111100,D0
00003086  123C 0002                245          MOVE.B  #2,D1
0000308A  4EB8 0018                246          JSR     EADecoder
0000308E                           247          
0000308E                           248          *Print new line
0000308E  103C 000D                249          MOVE.B  #13,D0
00003092  43F8 0130                250          LEA     blank,A1
00003096  4E4F                     251          TRAP    #15
00003098                           252          
00003098                           253          *Test immediate addressing with size LONG
00003098  103C 003C                254          MOVE.B  #%00111100,D0
0000309C  123C 0004                255          MOVE.B  #4,D1
000030A0  4EB8 0018                256          JSR     EADecoder
000030A4                           257          
000030A4                           258          *Reset test data pointer
000030A4  207C 00005000            259          MOVEA.L #$00005000,A0
000030AA                           260          
000030AA                           261          *Print new line
000030AA  103C 000D                262          MOVE.B  #13,D0
000030AE  43F8 0130                263          LEA     blank,A1
000030B2  4E4F                     264          TRAP    #15
000030B4                           265          
000030B4                           266          *Test absolute addressing of size WORD
000030B4  103C 0039                267          MOVE.B  #%00111001,D0
000030B8  4EB8 0018                268          JSR     EADecoder
000030BC                           269          
000030BC                           270          *Print new line
000030BC  103C 000D                271          MOVE.B  #13,D0
000030C0  43F8 0130                272          LEA     blank,A1
000030C4  4E4F                     273          TRAP    #15
000030C6                           274          
000030C6                           275          *Test absolute addressing of size LONG
000030C6  103C 0039                276          MOVE.B  #%00111001,D0
000030CA  4EB8 0018                277          JSR     EADecoder
000030CE                           278          
000030CE                           279          END     $3000

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ABS_LONG            38
ABS_WORD            39
AN                  8
BLANK               130
DEC_ABS_LONG        C4
DEC_ABS_WORD        B8
DEC_AN              DC
DEC_DN              D0
DEC_IMMEDIATE       9C
DEC_INDIRECT        E8
DEC_POST_INC        FC
DEC_PRE_DEC         116
DEC_RETURN          7E
DN                  0
EADECODER           18
EADECODER_LEFT      0
IMMEDIATE           3C
IMM_SKIP            96
IMM_WORD            B4
INDIRECT            10
LEFT_SKIP           1C
OUTPUT              10000
POST_INC            18
PRE_DEC             20
START               3000

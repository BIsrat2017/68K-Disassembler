00003000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 3/7/2017 7:46:13 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : EA Decoder Test
00000000                             3  * Written by : Connor McGwire
00000000                             4  * Date       : 3/7/2017
00000000                             5  * Description: Tests effective addressing subroutine
00000000                             6  *-----------------------------------------------------------
00000000                             7  
00000000                             8          INCLUDE 'EADecoder.x68'
00000000                             9  
00000000                            10  
00000000  =00010000                 11  output      EQU $00010000
00000000                            12  
00000000  =0000003C                 13  IMMEDIATE   EQU %00111100
00000000  =00000039                 14  ABS_WORD    EQU %00111001
00000000  =00000038                 15  ABS_LONG    EQU %00111000
00000000  =00000000                 16  Dn          EQU %00000000
00000000  =00000008                 17  An          EQU %00001000
00000000  =00000010                 18  INDIRECT    EQU %00010000
00000000  =00000018                 19  POST_INC    EQU %00011000
00000000  =00000020                 20  PRE_DEC     EQU %00100000
00000000                            21  
00000000                            22  
00000000                            23  
00000000                            24  EADecoder
00000000  48E7 FF7E                 25          MOVEM.L     D0-D7/A1-A6, -(SP) *Store registers on stack, except D0
00000004                            26          
00000004  1401                      27          MOVE.B  D1,D2 ** Store opcode size in bytes into D2
00000006                            28          
00000006  43F9 00010000             29          LEA     output,A1
0000000C  45F9 00010000             30          LEA     output,A2
00000012                            31          
00000012                            32          *First, decoder will check for the 3 types with hard coded register values
00000012  B07C 003C                 33          CMP     #IMMEDIATE,D0
00000016  6700 006C                 34          BEQ     dec_immediate
0000001A                            35          
0000001A  B07C 0039                 36          CMP     #ABS_WORD,D0
0000001E  6700 0080                 37          BEQ     dec_abs_word
00000022                            38          
00000022  B07C 0038                 39          CMP     #ABS_LONG,D0
00000026  6700 0084                 40          BEQ     dec_abs_long
0000002A                            41          
0000002A  163C 0001                 42          MOVE.B  #1,D3
0000002E                            43          
0000002E                            44          *If it was none of the above, store the register and mode seperately
0000002E  1200                      45          MOVE.B  D0,D1
00000030  0201 0038                 46          ANDI.B  #%00111000,D1           *Get mode value
00000034  0200 0007                 47          ANDI.B  #%00000111,D0           *Get register value
00000038  0600 0030                 48          ADDI.B  #$30,D0
0000003C                            49                
0000003C  B27C 0000                 50          CMP     #Dn,D1
00000040  6700 0076                 51          BEQ     dec_Dn 
00000044                            52          
00000044  B27C 0008                 53          CMP     #An,D1
00000048  6700 007A                 54          BEQ     dec_An
0000004C                            55                  
0000004C  B27C 0010                 56          CMP     #INDIRECT,D1
00000050  6700 007E                 57          BEQ     dec_indirect
00000054                            58                  
00000054  B27C 0018                 59          CMP     #POST_INC,D1
00000058  6700 008A                 60          BEQ     dec_post_inc
0000005C                            61                  
0000005C  B27C 0020                 62          CMP     #PRE_DEC,D1
00000060  6700 009C                 63          BEQ     dec_pre_dec
00000064                            64          
00000064  4243                      65          CLR     D3
00000066                            66          
00000066                            67  dec_return ** Common return for all types
00000066                            68          
00000066                            69          ** Print display string
00000066  103C 000E                 70          MOVE.B  #14,D0
0000006A  4E4F                      71          TRAP    #15
0000006C                            72          
0000006C                            73          ** If there is immediate data to print, print it
0000006C  B67C 0001                 74          CMP     #1,D3
00000070  6700 000C                 75          BEQ     imm_skip
00000074                            76          
00000074  103C 000F                 77          MOVE.B  #15,D0
00000078  143C 0010                 78          MOVE.B  #16,D2
0000007C  4E4F                      79          TRAP    #15
0000007E                            80  
0000007E                            81  imm_skip
0000007E  4CDF 7EFF                 82          MOVEM.L     (SP)+, D0-D7/A1-A6 *Return register data from stack, except D0
00000082  4E75                      83          RTS
00000084                            84          
00000084                            85          * Individual EA decoders *
00000084                            86  
00000084                            87  dec_immediate   *DECODE IMMEDIATE VALUE*
00000084  14FC 0023                 88          MOVE.B  #'#',(A2)+  * Move '#' char into string
00000088  14FC 0024                 89          MOVE.B  #'$',(A2)+  * Move '$' char into string
0000008C  14FC 0000                 90          MOVE.B  #$0,(A2)+   * Null terminate string
00000090  B47C 0002                 91          CMP     #2,D2       * Check if data is word length
00000094  6700 0006                 92          BEQ     imm_word    
00000098                            93          
00000098  2218                      94          MOVE.L  (A0)+,D1    * Length was long
0000009A  60CA                      95          BRA     dec_return
0000009C                            96          
0000009C                            97  imm_word
0000009C  3218                      98          MOVE.W  (A0)+,D1    * Length was word
0000009E  60C6                      99          BRA     dec_return
000000A0                           100  
000000A0                           101  
000000A0                           102  dec_abs_word    *DECODE ABSOLUTE WORD*
000000A0  14FC 0024                103          MOVE.B  #'$',(A2)+  * Move '$' char into string
000000A4  14FC 0000                104          MOVE.B  #$0,(A2)+   * Null terminate string
000000A8  3218                     105          MOVE.W  (A0)+,D1
000000AA  60BA                     106          BRA     dec_return
000000AC                           107          
000000AC                           108  
000000AC                           109  dec_abs_long    *DECODE ABSOLUTE LONG*
000000AC  14FC 0024                110          MOVE.B  #'$',(A2)+  * Move '$' char into string
000000B0  14FC 0000                111          MOVE.B  #$0,(A2)+   * Null terminate string
000000B4  2218                     112          MOVE.L  (A0)+,D1
000000B6  60AE                     113          BRA     dec_return
000000B8                           114          
000000B8                           115  
000000B8                           116  dec_Dn          *DECODE DIRECT DATA*
000000B8  14FC 0044                117          MOVE.B  #'D',(A2)+
000000BC  14C0                     118          MOVE.B  D0,(A2)+
000000BE  14FC 0000                119          MOVE.B  #$0,(A2)+
000000C2  60A2                     120          BRA     dec_return
000000C4                           121  
000000C4                           122          
000000C4                           123  dec_An          *DECODE DIRECT ADDRESS*
000000C4  14FC 0041                124          MOVE.B  #'A',(A2)+
000000C8  14C0                     125          MOVE.B  D0,(A2)+
000000CA  14FC 0000                126          MOVE.B  #$0,(A2)+
000000CE  6096                     127          BRA     dec_return
000000D0                           128  
000000D0                           129  
000000D0                           130  dec_indirect    *DECODE INDIRECT ACCESS*
000000D0  14FC 0028                131          MOVE.B  #'(',(A2)+
000000D4  14FC 0041                132          MOVE.B  #'A',(A2)+
000000D8  14C0                     133          MOVE.B  D0,(A2)+
000000DA  14FC 0029                134          MOVE.B  #')',(A2)+
000000DE  14FC 0000                135          MOVE.B  #$0,(A2)+
000000E2  6082                     136          BRA     dec_return
000000E4                           137          
000000E4                           138  
000000E4                           139  dec_post_inc    *DECODE INDIRECT POST INCREMENT*
000000E4  14FC 0028                140          MOVE.B  #'(',(A2)+
000000E8  14FC 0041                141          MOVE.B  #'A',(A2)+
000000EC  14C0                     142          MOVE.B  D0,(A2)+
000000EE  14FC 0029                143          MOVE.B  #')',(A2)+
000000F2  14FC 002B                144          MOVE.B  #'+',(A2)+
000000F6  14FC 0000                145          MOVE.B  #$0,(A2)+
000000FA  6000 FF6A                146          BRA     dec_return
000000FE                           147          
000000FE                           148          
000000FE                           149  dec_pre_dec    *DECODE INDIRECT PRE DECREMENT*
000000FE  14FC 002D                150          MOVE.B  #'-',(A2)+
00000102  14FC 0028                151          MOVE.B  #'(',(A2)+
00000106  14FC 0041                152          MOVE.B  #'A',(A2)+
0000010A  14C0                     153          MOVE.B  D0,(A2)+
0000010C  14FC 0029                154          MOVE.B  #')',(A2)+
00000110  14FC 0000                155          MOVE.B  #$0,(A2)+
00000114  6000 FF50                156          BRA     dec_return
00000118                           157  
00000118                           158  
00000118                           159  
00000118                           160  
00000118                           161  -------------------- end include --------------------
00000118                           162  
00000118= 00                       163  blank   DC.B    '',0
00000119                           164  
00003000                           165          ORG     $3000
00003000                           166          
00003000                           167  start   
00003000                           168          ** Test non-immediate ea modes
00003000                           169          
00003000                           170          *Test direct register
00003000  103C 0005                171          MOVE.B  #%00000101,D0
00003004  4EB8 0000                172          JSR     EADecoder
00003008                           173          
00003008  103C 000D                174          MOVE.B  #13,D0
0000300C  43F8 0118                175          LEA     blank,A1
00003010  4E4F                     176          TRAP    #15
00003012                           177          
00003012                           178          *Test address register
00003012  103C 0008                179          MOVE.B  #%00001000,D0
00003016  4EB8 0000                180          JSR     EADecoder
0000301A                           181          
0000301A  103C 000D                182          MOVE.B  #13,D0
0000301E  43F8 0118                183          LEA     blank,A1
00003022  4E4F                     184          TRAP    #15
00003024                           185          
00003024                           186          *Test indirect addressing
00003024  103C 0012                187          MOVE.B  #%00010010,D0
00003028  4EB8 0000                188          JSR     EADecoder
0000302C                           189          
0000302C  103C 000D                190          MOVE.B  #13,D0
00003030  43F8 0118                191          LEA     blank,A1
00003034  4E4F                     192          TRAP    #15
00003036                           193          
00003036                           194          *Test Post Increment
00003036  103C 001E                195          MOVE.B  #%00011110,D0
0000303A  4EB8 0000                196          JSR     EADecoder
0000303E                           197          
0000303E  103C 000D                198          MOVE.B  #13,D0
00003042  43F8 0118                199          LEA     blank,A1
00003046  4E4F                     200          TRAP    #15
00003048                           201          
00003048                           202          *Test Pre Decrement
00003048  103C 0023                203          MOVE.B  #%00100011,D0
0000304C  4EB8 0000                204          JSR     EADecoder
00003050                           205          
00003050                           206  *************************************************
00003050                           207          
00003050                           208          ** Test immediate ea modes **
00003050                           209          
00003050                           210          *Load test data into memory
00003050  207C 00005000            211          MOVEA.L #$00005000,A0
00003056  30FC 782A                212          MOVE.W  #$782A,(A0)+
0000305A  20FC 1111AAAA            213          MOVE.L  #$1111AAAA,(A0)+
00003060  207C 00005000            214          MOVEA.L #$00005000,A0
00003066                           215          
00003066                           216          *Print new line
00003066  103C 000D                217          MOVE.B  #13,D0
0000306A  43F8 0118                218          LEA     blank,A1
0000306E  4E4F                     219          TRAP    #15
00003070                           220          
00003070                           221          *Test immediate addressing with size BYTE or WORD
00003070  103C 003C                222          MOVE.B  #%00111100,D0
00003074  123C 0002                223          MOVE.B  #2,D1
00003078  4EB8 0000                224          JSR     EADecoder
0000307C                           225          
0000307C                           226          *Print new line
0000307C  103C 000D                227          MOVE.B  #13,D0
00003080  43F8 0118                228          LEA     blank,A1
00003084  4E4F                     229          TRAP    #15
00003086                           230          
00003086                           231          *Test immediate addressing with size LONG
00003086  103C 003C                232          MOVE.B  #%00111100,D0
0000308A  123C 0004                233          MOVE.B  #4,D1
0000308E  4EB8 0000                234          JSR     EADecoder
00003092                           235          
00003092                           236          *Reset test data pointer
00003092  207C 00005000            237          MOVEA.L #$00005000,A0
00003098                           238          
00003098                           239          *Print new line
00003098  103C 000D                240          MOVE.B  #13,D0
0000309C  43F8 0118                241          LEA     blank,A1
000030A0  4E4F                     242          TRAP    #15
000030A2                           243          
000030A2                           244          *Test absolute addressing of size WORD
000030A2  103C 0039                245          MOVE.B  #%00111001,D0
000030A6  4EB8 0000                246          JSR     EADecoder
000030AA                           247          
000030AA                           248          *Print new line
000030AA  103C 000D                249          MOVE.B  #13,D0
000030AE  43F8 0118                250          LEA     blank,A1
000030B2  4E4F                     251          TRAP    #15
000030B4                           252          
000030B4                           253          *Test absolute addressing of size LONG
000030B4  103C 0039                254          MOVE.B  #%00111001,D0
000030B8  4EB8 0000                255          JSR     EADecoder
000030BC                           256          
000030BC                           257          END     $3000

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ABS_LONG            38
ABS_WORD            39
AN                  8
BLANK               118
DEC_ABS_LONG        AC
DEC_ABS_WORD        A0
DEC_AN              C4
DEC_DN              B8
DEC_IMMEDIATE       84
DEC_INDIRECT        D0
DEC_POST_INC        E4
DEC_PRE_DEC         FE
DEC_RETURN          66
DN                  0
EADECODER           0
IMMEDIATE           3C
IMM_SKIP            7E
IMM_WORD            9C
INDIRECT            10
OUTPUT              10000
POST_INC            18
PRE_DEC             20
START               3000

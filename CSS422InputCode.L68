00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 3/2/2017 6:03:03 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :
00000000                             3  * Written by :
00000000                             4  * Date       :
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00000000  =0000000D                  7  CR      EQU     $0D
00000000  =0000000A                  8  LF      EQU     $0A   
00000000                             9          INCLUDE 'ASCII_HEX_Conversions.x68'
00000000                            10  
00000000                            11  
00000000                            12  
00000000                            13  A2H     *Converts and ASCII Byte string into HEX; Size WORD
00000000  48E7 7FFE                 14          MOVEM.L     D1-D7/A0-A6, -(SP)  
00000004                            15          
00000004  3400                      16          MOVE.W  D0,D2
00000006  3202                      17          MOVE.W  D2,D1                   *Store length of string into D1 for looping
00000008  2248                      18          MOVEA.L A0,A1                   *Copy starting point of string
0000000A                            19  
0000000A  6000 001C                 20          BRA     numSub
0000000E                            21  numSubRTN
0000000E  2049                      22          MOVEA.L A1,A0                   *Restore address position
00000010  3202                      23          MOVE.W  D2,D1                   *Reset loop counter
00000012                            24          
00000012  6000 001E                 25          BRA     upSub
00000016                            26  upSubRTN        
00000016  2049                      27          MOVEA.L A1,A0                   *Restore address position
00000018  3202                      28          MOVE.W  D2,D1                   *Reset loop counter
0000001A  4240                      29          CLR     D0                      *Clear D0
0000001C                            30  addBytes
0000001C  D018                      31          ADD.B   (A0)+,D0
0000001E  57C9 FFFC                 32          DBEQ    D1,addBytes
00000022                            33  
00000022  4CDF 7FFE                 34          MOVEM.L     (SP)+, D1-D7/A0-A6
00000026  4E75                      35          RTS
00000028                            36          
00000028                            37  numSub  *Convert ASCII 'number' to true number byte; Should not be called outside of the A2H subroutines
00000028  0418 0030                 38          SUBI.B  #$30,(A0)+              *Subtract difference between null ASCII and '0' ASCII
0000002C  5341                      39          SUB.W   #1,D1                   *Decrement loop counter
0000002E  66F8                      40          BNE     numSub                  *If loop has not ended restart
00000030  60DC                      41          BRA     numSubRTN
00000032                            42  
00000032                            43  upSub   *Loops through string to remove any upper case characters 
00000032                            44          *that may remain in the string
00000032  0C10 0009                 45          CMPI.B  #9,(A0)                 *Check if the value is greater than 0-9
00000036  6F00 0004                 46          BLE     upSEnd                  *If it's not, continue loop
0000003A  5310                      47          SUBI.B  #1,(A0)                 *Otherwise, subtract difference between ASCII 'number' code and 'A' code
0000003C                            48  upSEnd
0000003C  5248                      49          ADDA.W  #1,A0                   *Increment to next position to check for uppercase
0000003E  5341                      50          SUB.W   #1,D1                   *Decrement loop counter
00000040  66F0                      51          BNE     upSub                   
00000042  60D2                      52          BRA     upSubRTN
00000042  60D2                      53  -------------------- end include --------------------
00001000                            54  START:  ORG     $1000                
00001000                            55  
00001000                            56  * Put program code here
00001000                            57  *------Code for output-------
00001000                            58          
00001000  43F9 00001020             59          LEA     MESSAGE,A1      *Code block for first message
00001006  103C 000E                 60          MOVE.B  #14,D0
0000100A  4E4F                      61          TRAP    #15
0000100C                            62         
0000100C                            63  INV_INPUT  
0000100C                            64       
0000100C  227C 00004000             65          MOVEA.L #$4000, A1
00001012  103C 0002                 66          MOVE.B  #2,D0           *Code block for reading input
00001016  4E4F                      67          TRAP    #15   
00001018  3001                      68          MOVE.W  D1,D0
0000101A                            69          
0000101A  2049                      70          MOVEA.L A1,A0           *Move the contents of A1 to A0 for the conversion
0000101C  4EB8 0000                 71          JSR     A2H             *Branch to Connor's code
00001020                            72          
00001020= 45 6E 74 65 72 20 ...     73  MESSAGE DC.B    'Enter a number: ',0
00001031                            74  
00001032  FFFF FFFF                 75      SIMHALT             ; halt simulator
00001036                            76  
00001036                            77  * Put variables and constants here
00001036                            78  
00001036                            79      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
A2H                 0
ADDBYTES            1C
CR                  D
INV_INPUT           100C
LF                  A
MESSAGE             1020
NUMSUB              28
NUMSUBRTN           E
START               1000
UPSEND              3C
UPSUB               32
UPSUBRTN            16

00000000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 3/7/2017 6:32:45 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :  EA Decoders
00000000                             3  * Written by :  Team Dankware - Connor Davis McGwire
00000000                             4  * Date       :  3/2/2017
00000000                             5  * Description:  Subroutines for decoding EA bits
00000000                             6  *-----------------------------------------------------------
00000000                             7  
00000000                             8  ** EA decoder assumes properly formatted bits are stored in D0 **
00000000                             9  ** D1 will contain the opcode size in bytes (either word or long) **
00000000                            10  ** Decoder also requires potential address of immediate data in the A0 register **
00000000                            11  ** A0 will be incremented to the end of the immediate data field. **
00000000                            12  ** Code pattern is 00<mode><register> **
00000000                            13  
00000000  =00010000                 14  output      EQU $00010000
00000000                            15  
00000000  =0000003C                 16  IMMEDIATE   EQU %00111100
00000000  =00000039                 17  ABS_WORD    EQU %00111001
00000000  =00000038                 18  ABS_LONG    EQU %00111000
00000000  =00000000                 19  Dn          EQU %00000000
00000000  =00000008                 20  An          EQU %00001000
00000000  =00000010                 21  INDIRECT    EQU %00010000
00000000  =00000018                 22  POST_INC    EQU %00011000
00000000  =00000020                 23  PRE_DEC     EQU %00100000
00000000                            24  
00000000                            25  ** REGISTER MAP
00000000                            26  * A0 = OUTPUT   Decoder pointer
00000000                            27  * A1 =          Display string start
00000000                            28  * A2 =          Incremented output string builder
00000000                            29  
00000000                            30  * D0 = INPUT    Mode and register bits
00000000                            31  *               / Immediate data read
00000000                            32  * D1 = INPUT    Opcode size
00000000                            33  *               / Register value
00000000                            34  * D2 =          Temp storage
00000000                            35  * D3 =          Should output immediate data?
00000000                            36  
00000000                            37  EADecoder
00000000  48E7 FF7E                 38          MOVEM.L     D0-D7/A1-A6, -(SP) *Store registers on stack, except D0
00000004                            39          
00000004  1401                      40          MOVE.B  D1,D2 ** Store opcode size in bytes into D2
00000006                            41          
00000006  43F9 00010000             42          LEA     output,A1
0000000C  45F9 00010000             43          LEA     output,A2
00000012                            44          
00000012                            45          *First, decoder will check for the 3 types with hard coded register values
00000012  B07C 003C                 46          CMP     #IMMEDIATE,D0
00000016  6700 0068                 47          BEQ     dec_immediate
0000001A                            48          
0000001A  B07C 0039                 49          CMP     #ABS_WORD,D0
0000001E  6700 007C                 50          BEQ     dec_abs_word
00000022                            51          
00000022  B07C 0038                 52          CMP     #ABS_LONG,D0
00000026  6700 0080                 53          BEQ     dec_abs_long
0000002A                            54          
0000002A  163C 0001                 55          MOVE.B  #1,D3
0000002E                            56          
0000002E                            57          *If it was none of the above, store the register and mode seperately
0000002E  1200                      58          MOVE.B  D0,D1
00000030  0201 0038                 59          ANDI.B  #%00111000,D1           *Get mode value
00000034  0200 0007                 60          ANDI.B  #%00000111,D0           *Get register value
00000038                            61                
00000038  B27C 0000                 62          CMP     #Dn,D1
0000003C  6700 0076                 63          BEQ     dec_Dn 
00000040                            64          
00000040  B27C 0008                 65          CMP     #An,D1
00000044  6700 007A                 66          BEQ     dec_An
00000048                            67                  
00000048  B27C 0010                 68          CMP     #INDIRECT,D1
0000004C  6700 007E                 69          BEQ     dec_indirect
00000050                            70                  
00000050  B27C 0018                 71          CMP     #POST_INC,D1
00000054  6700 008A                 72          BEQ     dec_post_inc
00000058                            73                  
00000058  B27C 0020                 74          CMP     #PRE_DEC,D1
0000005C  6700 009C                 75          BEQ     dec_pre_dec
00000060                            76          
00000060  4243                      77          CLR     D3
00000062                            78          
00000062                            79  dec_return ** Common return for all types
00000062                            80          
00000062                            81          ** Print display string
00000062  103C 0001                 82          MOVE.B  #1,D0
00000066  4E4F                      83          TRAP    #15
00000068                            84          
00000068                            85          ** If there is immediate data to print, print it
00000068  B67C 0000                 86          CMP     #0,D3
0000006C  6700 000C                 87          BEQ     imm_skip
00000070                            88          
00000070  103C 000F                 89          MOVE.B  #15,D0
00000074  143C 0010                 90          MOVE.B  #16,D2
00000078  4E4F                      91          TRAP    #15
0000007A                            92  
0000007A                            93  imm_skip
0000007A  4CDF 7EFF                 94          MOVEM.L     (SP)+, D0-D7/A1-A6 *Return register data from stack, except D0
0000007E  4E75                      95          RTS
00000080                            96          
00000080                            97  **********************************************************************************
00000080                            98          * Individual EA decoders *
00000080                            99  **********************************************************************************
00000080                           100  
00000080                           101  dec_immediate   *DECODE IMMEDIATE VALUE*
00000080  14FC 0023                102          MOVE.B  #'#',(A2)+  * Move '#' char into string
00000084  14FC 0024                103          MOVE.B  #'$',(A2)+  * Move '$' char into string
00000088  14FC 0000                104          MOVE.B  #$0,(A2)+   * Null terminate string
0000008C  B47C 0002                105          CMP     #2,D2       * Check if data is word length
00000090  6700 0006                106          BEQ     imm_word    
00000094                           107          
00000094  2218                     108          MOVE.L  (A0)+,D1    * Length was long
00000096  60CA                     109          BRA     dec_return
00000098                           110          
00000098                           111  imm_word
00000098  3218                     112          MOVE.W  (A0)+,D1    * Length was word
0000009A  60C6                     113          BRA     dec_return
0000009C                           114  
0000009C                           115  ************************************************************
0000009C                           116  
0000009C                           117  dec_abs_word    *DECODE ABSOLUTE WORD*
0000009C  14FC 0024                118          MOVE.B  #'$',(A2)+  * Move '$' char into string
000000A0  14FC 0000                119          MOVE.B  #$0,(A2)+   * Null terminate string
000000A4  3218                     120          MOVE.W  (A0)+,D1
000000A6  60BA                     121          BRA     dec_return
000000A8                           122          
000000A8                           123  ************************************************************
000000A8                           124  
000000A8                           125  dec_abs_long    *DECODE ABSOLUTE LONG*
000000A8  14FC 0024                126          MOVE.B  #'$',(A2)+  * Move '$' char into string
000000AC  14FC 0000                127          MOVE.B  #$0,(A2)+   * Null terminate string
000000B0  2218                     128          MOVE.L  (A0)+,D1
000000B2  60AE                     129          BRA     dec_return
000000B4                           130          
000000B4                           131  ************************************************************
000000B4                           132  
000000B4                           133  dec_Dn          *DECODE DIRECT DATA*
000000B4  14FC 0044                134          MOVE.B  #'D',(A2)+
000000B8  14C0                     135          MOVE.B  D0,(A2)+
000000BA  14FC 0000                136          MOVE.B  #$0,(A2)+
000000BE  60A2                     137          BRA     dec_return
000000C0                           138  
000000C0                           139  ************************************************************
000000C0                           140          
000000C0                           141  dec_An          *DECODE DIRECT ADDRESS*
000000C0  14FC 0041                142          MOVE.B  #'A',(A2)+
000000C4  14C0                     143          MOVE.B  D0,(A2)+
000000C6  14FC 0000                144          MOVE.B  #$0,(A2)+
000000CA  6096                     145          BRA     dec_return
000000CC                           146  
000000CC                           147  ************************************************************
000000CC                           148  
000000CC                           149  dec_indirect    *DECODE INDIRECT ACCESS*
000000CC  14FC 0028                150          MOVE.B  #'(',(A2)+
000000D0  14FC 0041                151          MOVE.B  #'A',(A2)+
000000D4  14C0                     152          MOVE.B  D0,(A2)+
000000D6  14FC 0029                153          MOVE.B  #')',(A2)+
000000DA  14FC 0000                154          MOVE.B  #$0,(A2)+
000000DE  6082                     155          BRA     dec_return
000000E0                           156          
000000E0                           157  ************************************************************
000000E0                           158  
000000E0                           159  dec_post_inc    *DECODE INDIRECT POST INCREMENT*
000000E0  14FC 0028                160          MOVE.B  #'(',(A2)+
000000E4  14FC 0041                161          MOVE.B  #'A',(A2)+
000000E8  14C0                     162          MOVE.B  D0,(A2)+
000000EA  14FC 0029                163          MOVE.B  #')',(A2)+
000000EE  14FC 002B                164          MOVE.B  #'+',(A2)+
000000F2  14FC 0000                165          MOVE.B  #$0,(A2)+
000000F6  6000 FF6A                166          BRA     dec_return
000000FA                           167          
000000FA                           168  ************************************************************
000000FA                           169          
000000FA                           170  dec_pre_dec    *DECODE INDIRECT PRE DECREMENT*
000000FA  14FC 002D                171          MOVE.B  #'-',(A2)+
000000FE  14FC 0028                172          MOVE.B  #'(',(A2)+
00000102  14FC 0041                173          MOVE.B  #'A',(A2)+
00000106  14C0                     174          MOVE.B  D0,(A2)+
00000108  14FC 0029                175          MOVE.B  #')',(A2)+
0000010C  14FC 0000                176          MOVE.B  #$0,(A2)+
00000110  6000 FF50                177          BRA     dec_return
00000114                           178  
00000114                           179  
00000114                           180  
Line 181 WARNING: END directive missing, starting address not set

No errors detected
1 warning generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ABS_LONG            38
ABS_WORD            39
AN                  8
DEC_ABS_LONG        A8
DEC_ABS_WORD        9C
DEC_AN              C0
DEC_DN              B4
DEC_IMMEDIATE       80
DEC_INDIRECT        CC
DEC_POST_INC        E0
DEC_PRE_DEC         FA
DEC_RETURN          62
DN                  0
EADECODER           0
IMMEDIATE           3C
IMM_SKIP            7A
IMM_WORD            98
INDIRECT            10
OUTPUT              10000
POST_INC            18
PRE_DEC             20
